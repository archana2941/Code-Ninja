PROBLEM1:  First Bad Version
Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.
You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.

SOLUTION: This is basically a binary search problem.(Hint: how it could be a search problem-?? If one version is bad, following ones are also bad, So we need to search that first bad version, optimal search solution here is binary search.)

var solution = function(isBadVersion) {
    /**
     * @param {integer} n Total versions
     * @return {integer} The first bad version
     */
    return function(n) {
       let left = 1;
       let right = n;
        while(left<right) {
              let mid = parseInt((left+right)/2);
               if(isBadVersion(mid)) {
                   right = mid;
               } else {
                   left = mid + 1;
               }
              }
        return left;
    };
};

